plugins {
	id "java"
	id "application"
	id "idea"
	id "org.springframework.boot" version "2.6.3"
	id "io.spring.dependency-management" version "1.0.11.RELEASE"
	id "com.google.cloud.tools.jib" version "3.2.0"
}

group = "by.vk.betting.api"
version = "1.0.0-rc.1"

application {
	mainClass = "by.vk.betting.api.ServiceApplication"
	applicationName = "api"
}

bootJar {
	enabled = true
	archiveFileName = "application.jar"

	manifest {
		attributes 'provider': 'gradle'
	}
}

springBoot {
	buildInfo()
}

sourceSets {
	test {
		java.srcDirs("src/test/unit/java")
		resources.srcDir("src/test/unit/resources")
	}

	integrationTest {
		compileClasspath += sourceSets.main.output
		compileClasspath += sourceSets.test.output
		runtimeClasspath += sourceSets.main.output
		runtimeClasspath += sourceSets.test.output
		java.srcDirs("src/test/integration/java")
		resources.srcDirs("src/test/integration/resources")
	}
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

test {
	useJUnitPlatform()
}

task integrationTest(type: Test) {
	group = 'verification'
	testClassesDirs = sourceSets.integrationTest.output.classesDirs
	classpath = sourceSets.integrationTest.runtimeClasspath
	useJUnitPlatform()
}

check.dependsOn integrationTest
integrationTest.mustRunAfter test

idea {
	module {
		testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
		testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}

	implementation {
		exclude module: "spring-boot-starter-tomcat"
	}
}

repositories {
	mavenCentral()
}

ext {
	set("logbackVersion", "0.1.5")
	set("testcontainersVersion", "1.16.3")
	set("sparkStreamingVersion", "3.2.1")
}

dependencies {
	//region spring
	implementation("org.springframework.boot:spring-boot-starter-validation")
	implementation("org.springframework.boot:spring-boot-starter-undertow")
	implementation("org.springframework.boot:spring-boot-starter-web")
	implementation("org.springframework.boot:spring-boot-starter-actuator")
	implementation("org.springframework.boot:spring-boot-starter-webflux")
	implementation("org.apache.spark:spark-streaming_2.12:${sparkStreamingVersion}")
	//endregion

	//region logback
	implementation("ch.qos.logback.contrib:logback-json-classic:${logbackVersion}")
	implementation("ch.qos.logback.contrib:logback-jackson:${logbackVersion}")
	//endregion

	//region test
	testImplementation("org.springframework.boot:spring-boot-starter-test")
	testImplementation("org.testcontainers:postgresql:${testcontainersVersion}")
	testImplementation("org.testcontainers:junit-jupiter:${testcontainersVersion}")
	//endregion
}

jib {
	from {
		image = System.getenv("DOCKER_BASE_IMAGE") //gcr.io/distroless/java17-debian11
	}
	to {
		image = System.getenv("DOCKER_TO_IMAGE") // gcr.io/PROJECT/IMAGE
		auth {
			username = "oauth2accesstoken"
			password = "gcloud auth print-access-token".execute().text.trim()
		}
		tags = ["$version", "latest"]
	}
	container {
		jvmFlags = ["-Xss256k",
					"-Xmx512m",
					"-Xms256m",
					"-XX:MaxMetaspaceSize=128m",
					"-XX:+AlwaysActAsServerClassMachine",
					"-XX:+ExitOnOutOfMemoryError",
					"-XX:+UseContainerSupport",
					"-XX:+UseStringDeduplication",
					"-XX:+ExitOnOutOfMemoryError",
					"-XX:+OptimizeStringConcat",
					"-XX:MaxRAMPercentage=75",
					"-XX:InitialRAMPercentage=50",
					"-XX:HeapDumpPath=/opt/tmp/heapdump.bin"]
		mainClass = "by.vk.betting.api.ServiceApplication"
		ports = [System.getenv("DOCKER_CONTAINER_PORT")] // 8080
		labels = Map.of("app-name", "api", "service-version", "$version")
		creationTime = "USE_CURRENT_TIMESTAMP"
	}
}
